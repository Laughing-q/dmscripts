#!/usr/bin/env bash
#
# Script name: dm-translate
# Description: Translate using Google Translate (through Lingva Translate)
# Dependencies: dmenu, curl, and jq
# GitLab: https://www.gitlab.com/dwt1/dmscripts
# License: https://www.gitlab.com/dwt1/dmscripts/LICENSE
# Contributors: ifrendas, Simon Ingelsson

# Set with the flags "-e", "-u","-o pipefail" cause the script to fail
# if certain things happen, which is a good thing.  Otherwise, we can
# get hidden bugs that are hard to discover.
set -euo pipefail

_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd "$(dirname "$(readlink "${BASH_SOURCE[0]}" || echo ".")")" && pwd)"
if [[  -f "${_path}/_dm-helper.sh" ]]; then
  # shellcheck disable=SC1090,SC1091
  source "${_path}/_dm-helper.sh"
else
  # shellcheck disable=SC1090
  echo "No helper-script found"
fi

# script will not hit this if there is no config-file to load
# shellcheck disable=SC1090
source "$(get_config)"

main() {
  # If $translate_list is not set to "manual", automatically get languages
  if [[ "${translate_list:-auto}" != "manual" ]]; then
    declare -A lang_map
    # shellcheck disable=SC2086
    # shellcheck disable=SC2154
    if [[ "${translate_service}" == "lingva" ]]; then
      mapfile -t data < <(curl -Ss "${lingva_instance}/api/v1/languages/source" | \
        jq -cr ".languages | to_entries[] | .value | [.code,.name] | @sh")
    elif [[ "${translate_service}" == "libre" ]]; then
      mapfile -t data < <(curl -Ss "${libretranslate_instance}/languages" | \
        jq -cr "to_entries[] | .value | [.code,.name] | @sh")
    else
      echo "Invalid language service"
      echo "Valid options are: 'lingva' and 'libre'"
      exit 1
    fi

    for ((i=0; i < ${#data[@]}; ++i)); do
      # shellcheck disable=SC2086
      lang_map[$(echo ${data[$i]} | cut -d"'" -f4)]="$(echo ${data[$i]} | cut -d"'" -f2)"
    done
    unset data
  fi

  # Warn user and exit if "lang_map" has no elements (errors on unbound)
  if [[ ${lang_map@a} != A ]]; then 
    echo "The 'lang_map' array must be set to manually set languages!"
    exit 1
  fi

  # Get the languages to translate from and to
  from_name=$(printf '%s\n' "${!lang_map[@]}" | sort | ${DMENU} 'Translate from:') "$@" || exit 1
  to_name=$(printf '%s\n' "${!lang_map[@]}" | sort | ${DMENU} 'Translate to:') "$@" || exit 1

  from_code=${lang_map[$from_name]}
  to_code=${lang_map[$to_name]}

  # Get text to translate
  query=$(echo "" | ${DMENU} "Translate (${from_code} -> ${to_code}):")

  # Encode to url encoding
  query="$(echo "${query}" | jq -s -R -r @uri)"

  # Get the translation
  if [[ "${translate_service}" == "lingva" ]]; then
    translation=$(curl -Ss "${lingva_instance}"/api/v1/"${from_code}"/"${to_code}"/"${query}" | jq -r ".translation")
  elif [[ "${translate_service}" == "libre" ]]; then
    translation=$(curl -X POST -Ss "${libretranslate_instance}/translate?q=${query}&source=${from_code}&target=${to_code}" | jq -r ".translatedText")
  fi

  # Copy translation to clipboard and send notification
  echo "$translation" | cp2cb 
  notify-send "Translation (in clipboard)" "$translation"
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
